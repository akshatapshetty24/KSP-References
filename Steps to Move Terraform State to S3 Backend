## 📓 Terraform Remote Backend Setup — S3 + DynamoDB + State Migration

---

### 📌 Prerequisites:

* AWS CLI installed & configured (`aws configure`)
* Terraform installed (`terraform -v`)
* Existing Terraform project directory

---

## 📦 Steps

---

### 1️⃣ Create an S3 Bucket for State Storage

```bash
aws s3api create-bucket --bucket your-terraform-state-bucket --region ap-south-1 --create-bucket-configuration LocationConstraint=ap-south-1
```

---

### 2️⃣ Create a DynamoDB Table for State Locking (Optional but recommended)

```bash
aws dynamodb create-table \
    --table-name terraform-lock-table \
    --attribute-definitions AttributeName=LockID,AttributeType=S \
    --key-schema AttributeName=LockID,KeyType=HASH \
    --billing-mode PAY_PER_REQUEST \
    --region ap-south-1
```

---

### 3️⃣ Configure the Terraform Backend

In your `main.tf` or a separate `backend.tf`:

```hcl
terraform {
  backend "s3" {
    bucket         = "your-terraform-state-bucket"
    key            = "env/global/terraform.tfstate"
    region         = "ap-south-1"
    dynamodb_table = "terraform-lock-table"
    encrypt        = true
  }
}
```

---

### 4️⃣ Initialize the Backend and Migrate State

Run:

```bash
terraform init
```

When prompted:

```
Do you want to copy the existing state to the new backend? [yes]
```

Type **`yes`** to migrate your local state file to S3.

---

### 5️⃣ Verify State File in S3

Check for the state file in the specified S3 bucket and path:

```bash
aws s3 ls s3://your-terraform-state-bucket/env/global/
```

You should see `terraform.tfstate` listed.

---

## ✅ Done!

You’ve now set up a secure, centralized remote state storage for Terraform with state locking via DynamoDB.

---

Would you like me to prep this as a `.md` file you can directly drop into your GitHub repo too? I can generate it cleanly for you.
